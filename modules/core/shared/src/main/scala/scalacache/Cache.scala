package scalacache

import cats.effect.Async

import scala.concurrent.duration.Duration
import scala.language.higherKinds

abstract class Cache[F[_]: Async, V] extends CacheAlg[F, V] {

  def config: CacheConfig

  // Optimised methods for use by memoize: we know the key will be a single string so we can avoid some work.
  // These are public because calls to them are generated by the memoize macro.

  def cachingForMemoize(baseKey: String)(ttl: Option[Duration])(f: => V)(implicit flags: Flags): F[V]

  def cachingForMemoizeF(baseKey: String)(ttl: Option[Duration])(f: => F[V])(implicit flags: Flags): F[V]

}
